ðŸ”¹ What is an Interface?

An interface in Java is a blueprint of a class.
It defines what must be done, but not how it should be done.
You can think of it as a contract â€” if a class implements an interface, it promises
to provide concrete implementations for all its abstract methods.

ðŸ’¡ Real-world analogy
In a hospital, think of an interface as a doctorâ€™s duty chart:
Every doctor must be able to treat patients.
Every doctor must be able to write prescriptions.
But how they treat or prescribe (their specialization, style, etc.) depends on the individual doctor.
So the interface defines the rules, and classes define the behavior.


ðŸ”¹ Rules of Interfaces (You Must Know This)
All methods are abstract by default (until Java 8).
â†’ They only have method signatures, no body.
Fields are public, static, and final by default.
â†’ You canâ€™t change them.
A class can implement multiple interfaces (supports multiple inheritance).
An interface can extend another interface but not a class.
Since Java 8:
You can have default methods (methods with body).
You can have static methods in interfaces.

ðŸ”¹ Why use Interfaces?
Because they:
Enforce common behavior across different classes.
Allow multiple inheritance of type (something classes canâ€™t do).
Support loose coupling â€” your system depends on what is done, not who does it.
Enable scalability and testability â€” you can swap implementations without breaking the system.

ðŸ”¹ Example from Your Hospital Management System
Letâ€™s say you have multiple modules that handle appointments â€” one for online booking, one for walk-in patients.
You donâ€™t want your main code to depend on which one is being used.
So, you define a common interface.

ðŸ”¹ When to Use Interface in Your Hospital Management System
    Use Case	                            Why Interface Helps
AppointmentService	            Switch between online, walk-in, or teleconsultation systems easily
PaymentGateway	                Support Razorpay, Stripe, or Paytm without changing main code
NotificationService	            Send SMS, Email, or Push notifications interchangeably
UserAuthentication	            Allow multiple login mechanisms (email, Google, hospital ID)